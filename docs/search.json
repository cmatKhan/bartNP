[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 bartNP authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/holstege_deleteome_nps.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"holstege_deleteome_nps","text":"","code":"library(tidyverse) library(gprofiler2) library(rtracklayer)"},{"path":"/articles/holstege_deleteome_nps.html","id":"raw-data","dir":"Articles","previous_headings":"","what":"Raw Data","title":"holstege_deleteome_nps","text":"now, raw data originally published Kemmeren et al. (2014) available lab’s website. example, using deleteome_all_mutants_svd_transformed.txt originally published data effort made remove slow-growth factor unwanted variance O’Duibhir et al. (2014).","code":""},{"path":"/articles/holstege_deleteome_nps.html","id":"parsing-the-kemmeren-data","dir":"Articles","previous_headings":"","what":"Parsing the kemmeren data","title":"holstege_deleteome_nps","text":"","code":"parse_kemmeren_data = function(kemmeren_svd){    # read kemmeren_svd    kemmeren_data_mutants = read_tsv(kemmeren_svd)      # add gene_id as the column name of the first column   colnames(kemmeren_data_mutants)[1] = 'gene_id'      # remove any 'matA' samples   kemmeren_data_mutants = kemmeren_data_mutants %>%     select(-all_of(       colnames(kemmeren_data_mutants)[         str_detect(colnames(kemmeren_data_mutants), \"matA\")]))    # create a table with columns deleted_locus, which is extracted from the colnames    # of the kemmeren data, and another column with the corresponding column names   kemmeren_col_data = tibble(     deleted_locus = str_extract(       colnames(kemmeren_data_mutants)[3:ncol(kemmeren_data_mutants)], \".+(?=\\\\.del)\"),      colnames = colnames(kemmeren_data_mutants)[3:ncol(kemmeren_data_mutants)]   )    # use gprofilr2 to get the corresponding scerevisiae systematic IDs from the   # gene names in the kemmeren column names   kemmeren_cols_convert = gconvert(kemmeren_col_data$deleted_locus,                                organism = \"scerevisiae\",                                mthreshold = 1,                                filter_na = FALSE)    # create a dataframe which will act as the colData of the NetProphetDataSet   coldata = kemmeren_col_data %>% left_join(     select(kemmeren_cols_convert, -all_of(c('input_number', 'target_number'))),     by = c(\"deleted_locus\" = \"input\")   ) %>%     filter(!is.na(target)) %>%     select(-deleted_locus) %>%     dplyr::rename(deleted_locus = target, name = name)    # return a list with slots coldata and expr. The expr matrix is the kemmeren    # data, but filtered for those columns in the coldata   list(       coldata = coldata,       expr = kemmeren_data_mutants[,c('gene_id', 'commonName', coldata$colnames)]   )  }"},{"path":"/articles/holstege_deleteome_nps.html","id":"read-in-s--cerevisiae-annotations","dir":"Articles","previous_headings":"","what":"Read in s. cerevisiae annotations","title":"holstege_deleteome_nps","text":"Yeast Genome files may found ","code":"YEAST_GFF = \"~/Desktop/rnaseq_pipeline/rnaseq_pipeline/genome_files/S288C_R64/S288C_R64.gff\"  # list of top level gene features. Note that the kemmeren data does say that it # is at the transcript level. However, yeast genes have few exons and these seem  # to be mostly equivalent to genes. That said, I would suggest doing some investigation  # on your own  GFF_GENE_FEATURES = c('gene', 'pseudogene', 'tRNA_gene',                        'rRNA_gene', 'ncRNA_gene', 'snoRNA_gene', 'snRNA_gene')  yeast_gff = import(YEAST_GFF)  yeast_genes = yeast_gff[yeast_gff$type %in% GFF_GENE_FEATURES]"},{"path":[]},{"path":"/articles/holstege_deleteome_nps.html","id":"parse-uniprot-data","dir":"Articles","previous_headings":"","what":"Parse Uniprot data","title":"holstege_deleteome_nps","text":"get data using, , go Uniprot website enter following search: Note can select different set columns click ‘column’ button","code":"taxonomy:\"Saccharomyces cerevisiae (strain ATCC 204508 / S288c) (Baker's yeast) [559292]\" AND reviewed:yes UNIPROT_DATA = \"data/uniprot_yeast_20211102.tab\"  # lots of parsing -- provided as an example, but you will likely need to look  # at the file and extract what you'd like. This will be required if you go to  # the website and select/download a different set of columns  uniprot = read_tsv(UNIPROT_DATA) %>%   dplyr::rename(ID = `Gene names  (ordered locus )`,                 dna_binding = `DNA binding`) %>%   mutate(dna_binding_interval        = str_extract(dna_binding, \"\\\\d+\\\\.\\\\.\\\\d+\"),          dna_binding_domain          = str_extract(dna_binding, '(?<=note=)\".+\"'),          dna_binding_domain_evidence = str_extract(dna_binding, '(?<=evidence=)\".+\"')) %>%   separate(dna_binding_interval, sep=\"\\\\.\\\\.\", into=c(\"dna_binding_start\", \"dna_binding_end\")) %>%   mutate(dna_binding_start = as.integer(dna_binding_start),          dna_binding_end = as.integer(dna_binding_end),          dna_binding_domain = trimws(str_remove_all(dna_binding_domain, ';|\"|/evidence.+')),          dna_binding_domain_evidence = str_remove_all(dna_binding_domain_evidence, ';|\"'),          dna_binding_domain = str_replace(dna_binding_domain,\"A\\\\.T hook 1 DNA_BIND 1502\\\\.\\\\.1513  /note=A.T hook 2 DNA_BIND 1516\\\\.\\\\.1526  /note=A\\\\.T hook 3\", \"A.T hook\"))  colnames(uniprot) = trimws(str_remove_all(colnames(uniprot), \"Cross-reference|\\\\(|\\\\)|\"), which = \"both\")"},{"path":"/articles/holstege_deleteome_nps.html","id":"read-in-the-list-of-regulators-used-in-the-np2-paper","dir":"Articles","previous_headings":"","what":"Read in the list of regulators used in the NP2 paper","title":"holstege_deleteome_nps","text":"","code":"ROWNAMES_GENE_CONVERT = here(\"data/gProfiler_scerevisiae_11-1-2021_5-31-10.csv\") regulators_df = read_csv(ROWNAMES_GENE_CONVERT)"},{"path":"/articles/holstege_deleteome_nps.html","id":"create-kemmeren-granges","dir":"Articles","previous_headings":"","what":"create kemmeren granges","title":"holstege_deleteome_nps","text":"","code":"regulators_uniprot = uniprot %>%   filter(ID %in% regulators_df$initial_alias)  cant_find_id = setdiff(kemmeren_data$expr$gene_id, yeast_gff$ID)  # deleted if the annotation has since been removed or merged from the annotations replace_wrong_ids        = c(\"YKL047W\", \"YLR003C\", \"YAR061W\", \"DELETED\", \"DELETED\", \"DELETED\",   \"DELETED\", \"DELETED\") names(replace_wrong_ids) = c(\"ANR2\",    \"CMS1\",    \"YAR062W\", \"YDL038C\", \"YGR272C\",  \"YIL080W\",  \"YIL168W\", \"YIR044C\")   kemmeren_data$expr[which(kemmeren_data$expr$gene_id %in% names(replace_wrong_ids)), \"gene_id\"] = replace_wrong_ids  kemmeren_data$expr = kemmeren_data$expr %>%   filter(gene_id != \"DELETED\")  setdiff(kemmeren_data$expr$gene_id, yeast_gff$ID[!is.na(yeast_gff$ID)])  kemmeren_granges = yeast_gff[yeast_gff$ID %in% kemmeren_data$expr$gene_id]  kemmeren_granges = kemmeren_granges[order(match(kemmeren_granges$ID,kemmeren_data$expr$gene_id))]  stopifnot(identical(kemmeren_data$expr$gene_id, kemmeren_granges$ID))"},{"path":"/articles/holstege_deleteome_nps.html","id":"add-gene-wise-data-to-the-granges-object","dir":"Articles","previous_headings":"","what":"add gene-wise data to the granges object","title":"holstege_deleteome_nps","text":"","code":"kemmeren_granges[which(is.na(kemmeren_granges$gene))]$gene =   kemmeren_data$expr[which(is.na(kemmeren_granges$gene)), 'commonName']  kemmeren_granges$regulator = ifelse(kemmeren_granges$ID %in% regulators_df$initial_alias,                                     TRUE,                                     FALSE)  uniprot_cols_for_granges = as_tibble(kemmeren_granges) %>%   left_join(uniprot)  elementMetadata(kemmeren_granges)[colnames(uniprot)[3:ncol(uniprot)]] =   uniprot_cols_for_granges[,colnames(uniprot)[3:ncol(uniprot)]]  kem_tfs = kemmeren_granges[!is.na(kemmeren_granges$dna_binding_domain)]  expr = as.matrix(select(kemmeren_data$expr, -gene_id, -commonName)) rownames(expr) = kemmeren_data$expr$gene_id  del_loci_no_gene = setdiff(kemmeren_data$coldata$deleted_locus,                            kemmeren_granges[kemmeren_granges$ID %in% kemmeren_data$coldata$deleted_locus]$ID)  fltr_coldata = kemmeren_data$coldata[!kemmeren_data$coldata$deleted_locus %in% del_loci_no_gene, ]  fltr_expr = expr[,fltr_coldata$colnames]"},{"path":"/articles/holstege_deleteome_nps.html","id":"create-the-regulation-matrix","dir":"Articles","previous_headings":"","what":"create the regulation matrix","title":"holstege_deleteome_nps","text":"","code":"regulators = read_tsv(\"data/YEAST_DATA/YEAST/OUTPUT/regulators\", col_names = FALSE)$X1  regulators = regulators[regulators %in% fltr_coldata$deleted_locus]  tf_fltr = kemmeren_granges$ID %in% regulators  regulation_matrix = matrix(TRUE, nrow(fltr_expr), nrow(fltr_expr),                            dimnames = list(rownames(fltr_expr), rownames(fltr_expr))) regulation_matrix = regulation_matrix[,rownames(fltr_expr) %in% regulators]  self_reg = intersect(rownames(regulation_matrix), colnames(regulation_matrix))  regulation_matrix[cbind(self_reg,self_reg)] = FALSE"},{"path":"/articles/holstege_deleteome_nps.html","id":"create-the-netprophetdataset","dir":"Articles","previous_headings":"","what":"create the NetProphetDataSet","title":"holstege_deleteome_nps","text":"","code":"kem_np = NetProphetDataSet(   expr        = fltr_expr,   regMatrix   = regulation_matrix,   rowRanges   = kemmeren_granges,   colData     = fltr_coldata )"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chase Mateusiak. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mateusiak C (2021). bartNP: Execute BART TF perturbation data. R package version 0.0.0.0.","code":"@Manual{,   title = {bartNP: Execute BART on TF perturbation data},   author = {Chase Mateusiak},   year = {2021},   note = {R package version 0.0.0.0}, }"},{"path":"/index.html","id":"bartnp","dir":"","previous_headings":"","what":"Execute BART on TF perturbation data","title":"Execute BART on TF perturbation data","text":"can copy folder either local scratch space – input need.","code":""},{"path":"/index.html","id":"source-code-installation-for-development-users","dir":"","previous_headings":"","what":"Source Code Installation (for development users)","title":"Execute BART on TF perturbation data","text":"meant wishing play code. don’t want play source code, don’t install way. Clone repo spot keep source code. put mine /home/$USER/code computer. Launch project Rstudio (either click .Rproj file, open file navigator Rstudio). point, choice – renv virtual environment program akin python venv. set activate automatically – may cause issues . don’t know happen R date, don’t renv, etc. want deal virtual environment, first check documentation, next ask – important use vitual environment want actually work , never set R virtual environment someone elses’s computer, don’t know expect. ‘normal’ part installatoin – , , ’development.","code":""},{"path":"/index.html","id":"user-installation","dir":"","previous_headings":"","what":"User Installation","title":"Execute BART on TF perturbation data","text":"want use package interactively, within Nextflow pipeline without Singularity meant want install package, , example, open NetProphetDataSet explore . Installing way may mean may deal updates/dependency issues manually – just read error codes related installation. says, “don’t package x”, ’ll install. install_github() install dependencies automatically, always issues specific machines, etc. , avoiding problems point singularity, singularity installed, can always pull image use interactively. .","code":"library(remotes)  # note: if you don't have an up to date R, and if you haven't been keeping your core bioconductor packages up to date, then this is going to install a lot remotes::install_github(\"cmatKhan/bartNP\", dependencies = TRUE, upgrade = \"always\")"},{"path":"/index.html","id":"pulling-the-singularity","dir":"","previous_headings":"","what":"Pulling the singularity","title":"Execute BART on TF perturbation data","text":"may also pull Singularity container","code":""},{"path":"/index.html","id":"running-bartnp-with-nextflow","dir":"","previous_headings":"","what":"Running bartNP with NextFlow","title":"Execute BART on TF perturbation data","text":"See https://github.com/cmatKhan/bartNPNF","code":""},{"path":"/reference/NetProphetDataSet.html","id":null,"dir":"Reference","previous_headings":"","what":"A container for expression data meant to be used to infer regulator relationships — NetProphetDataSet-class","title":"A container for expression data meant to be used to infer regulator relationships — NetProphetDataSet-class","text":"container expression data meant used infer regulator relationships","code":""},{"path":"/reference/NetProphetDataSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A container for expression data meant to be used to infer regulator relationships — NetProphetDataSet-class","text":"","code":"NetProphetDataSet(   exprMatrix = matrix(0, 0, 0),   regMatrix = matrix(0, 0, 0),   ... )"},{"path":"/reference/NetProphetDataSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A container for expression data meant to be used to infer regulator relationships — NetProphetDataSet-class","text":"exprMatrix expression matrix, eg kemmeren microarray data set","code":""},{"path":"/reference/NetProphetDataSet.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A container for expression data meant to be used to infer regulator relationships — NetProphetDataSet-class","text":"regMatrix gene (number genes expression matrix) regulators (required number) matrix value TRUE gene can regulated regulator j, FALSE otherwise.","code":""},{"path":[]},{"path":"/reference/bartForOneGene.html","id":null,"dir":"Reference","previous_headings":"","what":"use BART to generate a network structure prediction — bartForOneGene","title":"use BART to generate a network structure prediction — bartForOneGene","text":"following can used memory performance profiling http://adv-r..co.nz/memory.html http://adv-r..co.nz/Profiling.html#measure-perf https://cran.r-project.org/web/packages/profmem/vignettes/profmem.html","code":""},{"path":"/reference/bartForOneGene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"use BART to generate a network structure prediction — bartForOneGene","text":"","code":"bartForOneGene(regulators_predictor_matrix, gene_response_array, ...)"},{"path":"/reference/bartForOneGene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"use BART to generate a network structure prediction — bartForOneGene","text":"regulators_predictor_matrix sample x regulator matrix values expression given regulator j sample gene_response_array Expression given gene samples. Length gene_response_array must rows regulators_predictor_matrix ... additional arguments BART::mc.wbart","code":""},{"path":"/reference/bartForOneGene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"use BART to generate a network structure prediction — bartForOneGene","text":"BART object","code":""},{"path":"/reference/bartNP-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bartNP: Execute BART on TF perturbation data — bartNP-package","title":"bartNP: Execute BART on TF perturbation data — bartNP-package","text":"Extend SummarizedExperiment slots functions ease TF effect modelling BART","code":""},{"path":"/reference/bartNP-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bartNP: Execute BART on TF perturbation data — bartNP-package","text":"Maintainer: Chase Mateusiak chasem@wustl.edu (ORCID)","code":""},{"path":"/reference/exprMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Set expression matrix — exprMat<-","title":"Set expression matrix — exprMat<-","text":"Set replace expression matrix NetProphetDataSet Extract expression matrix NetProphetDataSet","code":""},{"path":"/reference/exprMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set expression matrix — exprMat<-","text":"","code":"exprMat(x, ...) <- value  exprMat(x, ...)  # S4 method for NetProphetDataSet exprMat(x) <- value  # S4 method for NetProphetDataSet exprMat(x)"},{"path":"/reference/exprMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set expression matrix — exprMat<-","text":"x NetProphetDataSet object value expression matrix columns equal colData, colnames equal order colnames column colData","code":""},{"path":"/reference/nonRegGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"get list of genes from the rownames of the NetProphetDataSet which are not\nregulators, which are those genes in the columns of the regMatrix slot — nonRegGenes","title":"get list of genes from the rownames of the NetProphetDataSet which are not\nregulators, which are those genes in the columns of the regMatrix slot — nonRegGenes","text":"get list genes rownames NetProphetDataSet regulators, genes columns regMatrix slot","code":""},{"path":"/reference/nonRegGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get list of genes from the rownames of the NetProphetDataSet which are not\nregulators, which are those genes in the columns of the regMatrix slot — nonRegGenes","text":"","code":"nonRegGenes(x, ...)  # S4 method for NetProphetDataSet nonRegGenes(x)"},{"path":"/reference/nonRegGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get list of genes from the rownames of the NetProphetDataSet which are not\nregulators, which are those genes in the columns of the regMatrix slot — nonRegGenes","text":"x NetProphetDataSet object","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/regMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"gene by regulators matrix — regMatrix<-","title":"gene by regulators matrix — regMatrix<-","text":"matrix dimension genes, expression matrix NetProphetDataSet, columns corresponding regulators. Values boolean values TRUE allows regulator j affect transcription gene , FALSE disallows regulation.","code":""},{"path":"/reference/regMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gene by regulators matrix — regMatrix<-","text":"","code":"regMatrix(x, ...) <- value  regMatrix(x, ...)  # S4 method for NetProphetDataSet regMatrix(x) <- value  # S4 method for NetProphetDataSet regMatrix(x)"},{"path":"/reference/regMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gene by regulators matrix — regMatrix<-","text":"x NetProphetDataSet object value gene regulation matrix, number genes (rows) equal rows NetProphetDataSet expression matrix","code":""},{"path":"/reference/regPredictors.html","id":null,"dir":"Reference","previous_headings":"","what":"extract a subset of the expression matrix filtered by the regulation matrix\nfor a given gene — regPredictors","title":"extract a subset of the expression matrix filtered by the regulation matrix\nfor a given gene — regPredictors","text":"function returns matrix dimensions samples, samples columns NetProphetDataSet, x predictors, predictors subset regulators. regulators regulate gene according regulation matrix filtered ","code":""},{"path":"/reference/regPredictors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract a subset of the expression matrix filtered by the regulation matrix\nfor a given gene — regPredictors","text":"","code":"regPredictors(x, ...)  # S4 method for NetProphetDataSet regPredictors(x, gene, transpose = TRUE)"},{"path":"/reference/regPredictors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract a subset of the expression matrix filtered by the regulation matrix\nfor a given gene — regPredictors","text":"x NetProphetDataSet object gene gene rownames(x) possibly colnames(regMatrix(x)) transpose logical, default TRUE return sample x predictor matrix. NOTE particular interest calling C++ (maybe C?) functions store matricies differently R Fortran (row vs column wise). Best check details think might matter.","code":""},{"path":"/reference/sub-NetProphetDataSet-ANY-ANY-ANY-method.html","id":null,"dir":"Reference","previous_headings":"","what":"subsetting the NetProphetDataSet — [,NetProphetDataSet,ANY,ANY,ANY-method","title":"subsetting the NetProphetDataSet — [,NetProphetDataSet,ANY,ANY,ANY-method","text":"subsetting NetProphetDataSet","code":""},{"path":"/reference/sub-NetProphetDataSet-ANY-ANY-ANY-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"subsetting the NetProphetDataSet — [,NetProphetDataSet,ANY,ANY,ANY-method","text":"","code":"# S4 method for NetProphetDataSet,ANY,ANY,ANY [(x, i, j, drop = TRUE)"},{"path":"/reference/sub-NetProphetDataSet-ANY-ANY-ANY-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"subsetting the NetProphetDataSet — [,NetProphetDataSet,ANY,ANY,ANY-method","text":"x NetProphetDataSet object column index incicies (numeric boolean vector) j column filter -- index, name, boolean vector drop default TRUE. may anything -- need check part Extending SummarizedExperiment documentation, feature added, removed forgot remove argument.","code":""},{"path":"/reference/sub-NetProphetDataSet-ANY-ANY-ANY-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"subsetting the NetProphetDataSet — [,NetProphetDataSet,ANY,ANY,ANY-method","text":"NetProphetDataSet. subsetting genes, regulation matrix also gene filtered way counts. Column filtering currently affect regulation matrix","code":""}]
